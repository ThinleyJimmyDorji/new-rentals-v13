import { gql } from 'apollo-angular';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export enum GenderEnum {
  Female = 'female',
  Male = 'male',
  Unknown = 'unknown'
}

export type Mutation = {
  __typename?: 'Mutation';
  updateUser?: Maybe<UpdateUserPayload>;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export enum NameEnum {
  FreeTrial = 'free_trial',
  Golden = 'golden',
  Silver = 'silver'
}

export type PortalSetting = {
  __typename?: 'PortalSetting';
  businessName: Scalars['String'];
  dzongkhag?: Maybe<Scalars['String']>;
  gewog?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  themeColour?: Maybe<Scalars['String']>;
};

export type PortalSettingAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  businessName?: InputMaybe<Scalars['String']>;
  dzongkhag?: InputMaybe<Scalars['String']>;
  gewog?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  themeColour?: InputMaybe<ThemeColourEnum>;
};

export type Profile = {
  __typename?: 'Profile';
  fullName: Scalars['String'];
  gender?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  phone?: Maybe<Scalars['String']>;
};

export type ProfileAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  fullName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<GenderEnum>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  users: Array<User>;
};


export type QueryUsersArgs = {
  params?: InputMaybe<UserFilterAttributes>;
};

export type Role = {
  __typename?: 'Role';
  id: Scalars['ID'];
  roleName: Scalars['String'];
};

export enum StatusEnum {
  Active = 'active',
  Inactive = 'inactive'
}

export type SubscriptionPlan = {
  __typename?: 'SubscriptionPlan';
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type SubscriptionPlanAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<NameEnum>;
  offsetPage?: InputMaybe<Scalars['Int']>;
};

export enum ThemeColourEnum {
  Green = 'green',
  Pink = 'pink',
  Red = 'red'
}

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  attributes: UserAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String'];
  enabled?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  portalSetting?: Maybe<PortalSetting>;
  profile?: Maybe<Profile>;
  role: Role;
  status?: Maybe<Scalars['String']>;
  subscriptionPlan?: Maybe<SubscriptionPlan>;
};

export type UserAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  portalSetting?: InputMaybe<PortalSettingAttributes>;
  profile?: InputMaybe<ProfileAttributes>;
  roleId?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<StatusEnum>;
  subscriptionPlan?: InputMaybe<SubscriptionPlanAttributes>;
};

export type UserFilterAttributes = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  roleId?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<StatusEnum>;
};
