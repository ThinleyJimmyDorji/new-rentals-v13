import { gql } from 'apollo-angular';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A valid URL, transported as a string */
  File: any;
};

export type Amenity = {
  __typename?: 'Amenity';
  amenitableId: Scalars['ID'];
  amenitableType: Scalars['String'];
  atDetails: Scalars['String'];
  atType: Scalars['String'];
  id: Scalars['ID'];
  satDetails: Scalars['String'];
  satType: Scalars['String'];
};

export type AmenityAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  amenitableId?: InputMaybe<Scalars['ID']>;
  amenitableType?: InputMaybe<Scalars['String']>;
  atDetails?: InputMaybe<Scalars['String']>;
  /** Amenities Types are usually vast, so making it enum does not makes sense  */
  atType?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  /** usually the numbers, ex: if sat_type is swimming pool, sat_details will be 2 */
  satDetails?: InputMaybe<Scalars['String']>;
  satType?: InputMaybe<SatTypeEnum>;
  type?: InputMaybe<Scalars['String']>;
};

export type Attachment = {
  __typename?: 'Attachment';
  attachableId: Scalars['ID'];
  attachableType: Scalars['String'];
  category: Scalars['String'];
  fileContentType: Scalars['String'];
  fileName?: Maybe<Scalars['String']>;
  fileSize: Scalars['Int'];
  id: Scalars['ID'];
  url: Scalars['String'];
  user?: Maybe<User>;
  userId?: Maybe<Scalars['ID']>;
};

export type AttachmentAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  attachableId?: InputMaybe<Scalars['Int']>;
  attachableType?: InputMaybe<Scalars['String']>;
  category: CategoryEnum;
  file: Scalars['File'];
  fileFileName: Scalars['String'];
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
};

export enum CategoryEnum {
  Avatar = 'avatar',
  AvatarBackground = 'avatar_background',
  Logo = 'logo',
  MiscFiles = 'misc_files',
  Property = 'property',
  Unit = 'unit'
}

/** Autogenerated input type of CreateAttachment */
export type CreateAttachmentInput = {
  attributes: AttachmentAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of CreateAttachment */
export type CreateAttachmentPayload = {
  __typename?: 'CreateAttachmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  fileObject?: Maybe<Attachment>;
};

export type CreatePropertyAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  attachments?: InputMaybe<Array<AttachmentAttributes>>;
  id?: InputMaybe<Scalars['ID']>;
  lat: Scalars['String'];
  limitPerPage?: InputMaybe<Scalars['Int']>;
  lng: Scalars['String'];
  neighbourhoodDetails: Scalars['String'];
  normalAmenities?: InputMaybe<Array<AmenityAttributes>>;
  occupancyType: OccupancyTypeEnum;
  offsetPage?: InputMaybe<Scalars['Int']>;
  ownerId: Scalars['ID'];
  propertyDescription: Scalars['String'];
  propertyName: Scalars['String'];
  propertyType: PropertyTypeEnum;
  specialAmenities?: InputMaybe<Array<AmenityAttributes>>;
  units?: InputMaybe<Array<UnitAttributes>>;
};

/** Autogenerated input type of CreateProperty */
export type CreatePropertyInput = {
  attributes: CreatePropertyAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of CreateProperty */
export type CreatePropertyPayload = {
  __typename?: 'CreatePropertyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  property: Property;
};

export enum GenderEnum {
  Female = 'female',
  Male = 'male',
  Unknown = 'unknown'
}

export type Mutation = {
  __typename?: 'Mutation';
  createAttachment?: Maybe<CreateAttachmentPayload>;
  createProperty?: Maybe<CreatePropertyPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
};


export type MutationCreateAttachmentArgs = {
  input: CreateAttachmentInput;
};


export type MutationCreatePropertyArgs = {
  input: CreatePropertyInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export enum NameEnum {
  FreeTrial = 'free_trial',
  Golden = 'golden',
  Silver = 'silver'
}

export enum OccupancyTypeEnum {
  MultiFamilyHome = 'multi_family_home',
  SingleFamilyHome = 'single_family_home'
}

export type PortalSetting = {
  __typename?: 'PortalSetting';
  businessName: Scalars['String'];
  dzongkhag?: Maybe<Scalars['String']>;
  gewog?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  themeColour?: Maybe<Scalars['String']>;
};

export type PortalSettingAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  businessName?: InputMaybe<Scalars['String']>;
  dzongkhag?: InputMaybe<Scalars['String']>;
  gewog?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  themeColour?: InputMaybe<ThemeColourEnum>;
};

export type Profile = {
  __typename?: 'Profile';
  fullName: Scalars['String'];
  gender?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  phone?: Maybe<Scalars['String']>;
};

export type ProfileAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  fullName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<GenderEnum>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  phone?: InputMaybe<Scalars['String']>;
  salutation?: InputMaybe<SalutationEnum>;
};

export type Property = {
  __typename?: 'Property';
  attachments?: Maybe<Array<Attachment>>;
  id: Scalars['ID'];
  lat?: Maybe<Scalars['String']>;
  lng?: Maybe<Scalars['String']>;
  neighbourhoodDetails?: Maybe<Scalars['String']>;
  normalAmenities?: Maybe<Array<Amenity>>;
  occupancyType?: Maybe<Scalars['String']>;
  owner?: Maybe<User>;
  propertyDescription?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyType?: Maybe<Scalars['String']>;
  specialAmenities?: Maybe<Array<Amenity>>;
  units?: Maybe<Array<Unit>>;
};

export enum PropertyTypeEnum {
  ModernBuilding = 'modern_building',
  TraditionalHouse = 'traditional_house'
}

export type Query = {
  __typename?: 'Query';
  user: User;
  users: Array<User>;
};


export type QueryUserArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


export type QueryUsersArgs = {
  params?: InputMaybe<UserFilterAttributes>;
};

export type Role = {
  __typename?: 'Role';
  id: Scalars['ID'];
  roleName: Scalars['String'];
};

export enum SalutationEnum {
  Mr = 'Mr',
  Mrs = 'Mrs'
}

export enum SatTypeEnum {
  Lift = 'lift',
  SwimmingPool = 'swimming_pool'
}

export enum StatusEnum {
  Active = 'active',
  Inactive = 'inactive'
}

export type SubscriptionPlan = {
  __typename?: 'SubscriptionPlan';
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type SubscriptionPlanAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<NameEnum>;
  offsetPage?: InputMaybe<Scalars['Int']>;
};

export enum ThemeColourEnum {
  Green = 'green',
  Pink = 'pink',
  Red = 'red'
}

export type Unit = {
  __typename?: 'Unit';
  attachments: Array<Attachment>;
  id: Scalars['ID'];
  monthlyRent: Scalars['Int'];
  normalAmenities: Array<Amenity>;
  nosOfBath: Scalars['Boolean'];
  nosOfBed: Scalars['Boolean'];
  occupied: Scalars['Boolean'];
  property: Property;
  propertyId: Scalars['ID'];
  unitDescription: Scalars['Boolean'];
  unitNumber: Scalars['String'];
};

export type UnitAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  attachments?: InputMaybe<Array<AttachmentAttributes>>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  monthlyRent?: InputMaybe<Scalars['Int']>;
  normalAmenities?: InputMaybe<Array<AmenityAttributes>>;
  nosOfBath?: InputMaybe<Scalars['String']>;
  nosOfBed?: InputMaybe<Scalars['String']>;
  occupied?: InputMaybe<Scalars['Boolean']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  propertyId?: InputMaybe<Scalars['ID']>;
  unitDescription?: InputMaybe<Scalars['String']>;
  unitNumber?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  attributes: UserAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String'];
  enabled?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  portalSetting?: Maybe<PortalSetting>;
  profile?: Maybe<Profile>;
  profileBackground?: Maybe<Attachment>;
  profilePic?: Maybe<Attachment>;
  role: Role;
  status?: Maybe<Scalars['String']>;
  subscriptionPlan?: Maybe<SubscriptionPlan>;
};

export type UserAttributes = {
  _destroy?: InputMaybe<Scalars['Int']>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  portalSetting?: InputMaybe<PortalSettingAttributes>;
  profile?: InputMaybe<ProfileAttributes>;
  roleId?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<StatusEnum>;
  subscriptionPlan?: InputMaybe<SubscriptionPlanAttributes>;
};

export type UserFilterAttributes = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  limitPerPage?: InputMaybe<Scalars['Int']>;
  offsetPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  roleId?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<StatusEnum>;
};
