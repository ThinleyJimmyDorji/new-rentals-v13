# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Amenity {
  amenitableId: ID!
  amenitableType: String!
  atDetails: String!
  atType: String!
  id: ID!
  satDetails: String!
  satType: String!
}

type Attachment {
  attachableId: ID!
  attachableType: String!
  category: String!
  fileContentType: String!
  fileName: String
  fileSize: Int!
  id: ID!
  url: String!
  user: User
  userId: ID
}

"Autogenerated return type of CreateAttachment"
type CreateAttachmentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  fileObject: Attachment
}

"Autogenerated return type of CreateProperty"
type CreatePropertyPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  property: Property!
}

type Mutation {
  createAttachment(
    "Parameters for CreateAttachment"
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload
  createProperty(
    "Parameters for CreateProperty"
    input: CreatePropertyInput!
  ): CreatePropertyPayload
  updateUser(
    "Parameters for UpdateUser"
    input: UpdateUserInput!
  ): UpdateUserPayload
}

type PortalSetting {
  businessName: String!
  dzongkhag: String
  gewog: String
  id: ID!
  themeColour: String
}

type Profile {
  fullName: String!
  gender: String
  id: ID!
  phone: String
}

type Property {
  attachments: [Attachment!]
  id: ID!
  lat: String
  lng: String
  neighbourhoodDetails: String
  normalAmenities: [Amenity!]
  occupancyType: String
  owner: User
  propertyDescription: String
  propertyName: String
  propertyType: String
  specialAmenities: [Amenity!]
  units: [Unit!]
}

type Query {
  user(id: ID): User!
  users(params: UserFilterAttributes): [User!]!
}

type Role {
  id: ID!
  roleName: String!
}

type SubscriptionPlan {
  id: ID!
  name: String!
}

type Unit {
  attachments: [Attachment!]!
  id: ID!
  monthlyRent: Int!
  normalAmenities: [Amenity!]!
  nosOfBath: Boolean!
  nosOfBed: Boolean!
  occupied: Boolean!
  property: Property!
  propertyId: ID!
  unitDescription: Boolean!
  unitNumber: String!
}

"Autogenerated return type of UpdateUser"
type UpdateUserPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  user: User!
}

type User {
  email: String!
  enabled: Boolean
  id: ID!
  portalSetting: PortalSetting
  profile: Profile
  profileBackground: Attachment
  profilePic: Attachment
  role: Role!
  status: String
  subscriptionPlan: SubscriptionPlan
}

enum CategoryEnum {
  avatar
  avatar_background
  logo
  misc_files
  property
  unit
}

enum GenderEnum {
  female
  male
  unknown
}

enum NameEnum {
  free_trial
  golden
  silver
}

enum OccupancyTypeEnum {
  multi_family_home
  single_family_home
}

enum PropertyTypeEnum {
  modern_building
  traditional_house
}

enum SalutationEnum {
  Mr
  Mrs
}

enum SatTypeEnum {
  lift
  swimming_pool
}

enum StatusEnum {
  active
  inactive
}

enum ThemeColourEnum {
  green
  pink
  red
}

"A valid URL, transported as a string"
scalar File

input AmenityAttributes {
  _destroy: Int
  amenitableId: ID
  amenitableType: String
  atDetails: String
  "Amenities Types are usually vast, so making it enum does not makes sense "
  atType: String
  id: ID
  limitPerPage: Int
  offsetPage: Int
  "usually the numbers, ex: if sat_type is swimming pool, sat_details will be 2"
  satDetails: String
  satType: SatTypeEnum
  type: String
}

input AttachmentAttributes {
  _destroy: Int
  attachableId: Int
  attachableType: String
  category: CategoryEnum!
  file: File!
  fileFileName: String!
  id: ID
  limitPerPage: Int
  offsetPage: Int
}

"Autogenerated input type of CreateAttachment"
input CreateAttachmentInput {
  attributes: AttachmentAttributes!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  limitPerPage: Int
  offsetPage: Int
}

input CreatePropertyAttributes {
  _destroy: Int
  attachments: [AttachmentAttributes!]
  id: ID
  lat: String!
  limitPerPage: Int
  lng: String!
  neighbourhoodDetails: String!
  normalAmenities: [AmenityAttributes!]
  occupancyType: OccupancyTypeEnum!
  offsetPage: Int
  ownerId: ID!
  propertyDescription: String!
  propertyName: String!
  propertyType: PropertyTypeEnum!
  specialAmenities: [AmenityAttributes!]
  units: [UnitAttributes!]
}

"Autogenerated input type of CreateProperty"
input CreatePropertyInput {
  attributes: CreatePropertyAttributes!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  limitPerPage: Int
  offsetPage: Int
}

input PortalSettingAttributes {
  _destroy: Int
  businessName: String
  dzongkhag: String
  gewog: String
  id: ID
  limitPerPage: Int
  offsetPage: Int
  themeColour: ThemeColourEnum
}

input ProfileAttributes {
  _destroy: Int
  fullName: String
  gender: GenderEnum
  id: ID
  limitPerPage: Int
  offsetPage: Int
  phone: String
  salutation: SalutationEnum
}

input SubscriptionPlanAttributes {
  _destroy: Int
  id: ID
  limitPerPage: Int
  name: NameEnum
  offsetPage: Int
}

input UnitAttributes {
  _destroy: Int
  attachments: [AttachmentAttributes!]
  id: ID
  limitPerPage: Int
  monthlyRent: Int
  normalAmenities: [AmenityAttributes!]
  nosOfBath: String
  nosOfBed: String
  occupied: Boolean
  offsetPage: Int
  propertyId: ID
  unitDescription: String
  unitNumber: String
}

"Autogenerated input type of UpdateUser"
input UpdateUserInput {
  attributes: UserAttributes!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  limitPerPage: Int
  offsetPage: Int
}

input UserAttributes {
  _destroy: Int
  enabled: Boolean
  id: ID
  limitPerPage: Int
  offsetPage: Int
  portalSetting: PortalSettingAttributes
  profile: ProfileAttributes
  roleId: ID
  status: StatusEnum
  subscriptionPlan: SubscriptionPlanAttributes
}

input UserFilterAttributes {
  enabled: Boolean
  limitPerPage: Int
  offsetPage: Int
  query: String
  roleId: ID
  status: StatusEnum
}
